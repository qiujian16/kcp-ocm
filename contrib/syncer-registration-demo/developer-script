#!/bin/bash

DEMO_DIR="$( dirname "${BASH_SOURCE[0]}" )"
. ${DEMO_DIR}/demo-magic

ROOT_DIR="$( cd ${DEMO_DIR}/../.. && pwd)"
KUBECONFIG_DIR=${KUBECONFIG_DIR:-${DEMO_DIR}/kubeconfig}
KCP_ROOT="${DEMO_DIR}/kcp"

TYPE_SPEED=30
# PROMPT_AFTER=1
DEMO_PROMPT="☸️ $ "

# colors
RED='\033[0;31m'          # Red
GREEN='\033[0;32m'        # Green
YELLOW='\033[0;33m'       # Yellow

# function wait() {
#   if [[ -n "${NO_WAIT}" ]]; then
#     sleep 2
#   else
#     if [[ -n "${1-}" ]]; then
#       sleep "$1"
#     else
#       wait
#     fi
#   fi
# }

function comment() {
  echo -e '\033[0;33m>>> '$1' <<<\033[0m'
}

clear

comment "As a developer, I have a ManagedClusterSet with two clusters on ocm hub"
export KUBECONFIG=${KUBECONFIG_DIR}/hub.kubeconfig
pe "kubectl get managedclusterset"
pe "kubectl get managedclusters --show-labels"

comment "As a developer, I link my ManagedClusterSet with a KCP workspace"
pe "kubectl annotate managedclusterset dev \"kcp-workspace=workspace1\" --overwrite"

comment "After I linked my ManagedClusterSet with a KCP workspace, ocm will"
comment "deploy kcp-syncer to all managed clusters in my ManagedClusterSet"
unset KUBECONFIG

comment "kcp-syncer on the managed cluster cluster1"
export KUBECONFIG=${KUBECONFIG_DIR}/cluster1.kubeconfig
pe "kubectl -n kcp-syncer-workspace1 get pods --watch"
unset KUBECONFIG

comment "kcp-syncer on the managed cluster cluster2"
export KUBECONFIG=${KUBECONFIG_DIR}/cluster2.kubeconfig
pe "kubectl -n kcp-syncer-workspace1 get pods --watch"
unset KUBECONFIG

export KUBECONFIG=${KCP_ROOT}/.kcp/admin.kubeconfig
kcp_base_url=$(kubectl get workspaces workspace1 -o=jsonpath='{.status.baseURL}')
kubectl config view --minify --flatten | sed 's/\:6443/\:6443\/clusters\/admin_workspace1/g' > ${KUBECONFIG_DIR}/workspace1.admin.kubeconfig
unset KUBECONFIG

# starting splitter for test ...
(exec ./${KCP_ROOT}/bin/deployment-splitter --kubeconfig ${KUBECONFIG_DIR}/workspace1.admin.kubeconfig) &>> splitter.log &
SPLITTER_PID=$!

comment 'As a developer, I create deployment in my KCP workspace'
export KUBECONFIG=${KCP_ROOT}/.kcp/admin.kubeconfig
pe "kubectl get workspaces workspace1 -o=jsonpath='{.status.baseURL}' && echo"
unset KUBECONFIG

DEPLOYMENT_NAMESPACE="default"
pe "kubectl --insecure-skip-tls-verify=true --token dev-user-token --server=${kcp_base_url} create namespace ${DEPLOYMENT_NAMESPACE}" 
pe "kubectl --insecure-skip-tls-verify=true --token dev-user-token --server=${kcp_base_url} apply -f nginx.yaml -n ${DEPLOYMENT_NAMESPACE}"
pe "kubectl --insecure-skip-tls-verify=true --token dev-user-token --server=${kcp_base_url} get deployment --watch"
