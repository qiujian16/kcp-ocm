#!/bin/bash

DEMO_DIR="$( dirname "${BASH_SOURCE[0]}" )"
. ${DEMO_DIR}/demo-magic

ROOT_DIR="$( cd ${DEMO_DIR}/../.. && pwd)"
KUBECONFIG_DIR=${KUBECONFIG_DIR:-${DEMO_DIR}/kubeconfig}
KCP_ROOT="${DEMO_DIR}/kcp"

TYPE_SPEED=30
# PROMPT_AFTER=1
DEMO_PROMPT="☸️ $ "

# colors
RED='\033[0;31m'          # Red
GREEN='\033[0;32m'        # Green
YELLOW='\033[0;33m'       # Yellow

# function wait() {
#   if [[ -n "${NO_WAIT}" ]]; then
#     sleep 2
#   else
#     if [[ -n "${1-}" ]]; then
#       sleep "$1"
#     else
#       wait
#     fi
#   fi
# }

function comment() {
  echo -e '\033[0;33m>>> '$1' <<<\033[0m'
}

clear

export KUBECONFIG=${KCP_ROOT}/.kcp/admin.kubeconfig

comment "As a KCP admin, I create a WorkspaceShard that corresponds to the current KCP server"
pe "cat ${DEMO_DIR}/workspace/workspaceshard.yaml"
pe "kubectl create secret generic kubeconfig --from-file=kubeconfig=${KUBECONFIG}"
pe "kubectl apply -f ${DEMO_DIR}/workspace/workspaceshard.yaml"

comment "As a KCP admin, I create a KCP workspace"
pe "cat ${DEMO_DIR}/workspace/workspace.yaml"
pe "kubectl apply -f ${DEMO_DIR}/workspace/workspace.yaml"
comment "As a KCP admin, I assign this workspace to a developer"
pe "cat ${DEMO_DIR}/workspace/clusterrole.yaml"
pe "kubectl apply -f ${DEMO_DIR}/workspace/clusterrole.yaml"
pe "cat ${DEMO_DIR}/workspace/clusterrolebinding.yaml"
pe "kubectl apply -f ${DEMO_DIR}/workspace/clusterrolebinding.yaml"

unset KUBECONFIG
